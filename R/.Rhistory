}
}
}
if(cl[min_cluster_1] != k1 & cl[min_cluster_1] != k2) {
first_height <- height_merge[min_cluster_1]
for(j in k1_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(squared_prop_k2, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k2, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
for(j in k2_obs) {
if(first_height < height_merge[j]) {
current_height <- heights[first_height]
} else {
current_height <- heights[height_merge[j]]
}
if(min_cluster_1 > j) {
new_intervals <- solve_one_ineq(squared_prop_k1, B[min_cluster_1, j], C[min_cluster_1, j] - current_height)
} else {
new_intervals <- solve_one_ineq(squared_prop_k1, B[j, min_cluster_1], C[j, min_cluster_1] - current_height)
}
if(!is.null(new_intervals)) {
S_complement[[list_index]] <- new_intervals
list_index <- list_index + 1
}
}
}
}
S_complement <- do.call('c', S_complement)
S_complement <- matrix(S_complement, length(S_complement)/2, 2, byrow=TRUE)
S_complement <- intervals::reduce(intervals::Intervals(S_complement), check_valid=FALSE)
# complement the complement to get S
S <- intervals::interval_complement(S_complement, check_valid=FALSE)
})
cran_downloads(when = "last-week", packages = c("multiviewtest"))
a <- cran_logs:;cran_downloads(when = "last-week", packages = c("multiviewtest"))
a <- cran_logs::cran_downloads(when = "last-week", packages = c("multiviewtest"))
m <- cranDownloads(packages = c("multiviewtest"),
from = "2015", to = "2020-10-28")
m <- packagerank::cranDownloads(packages = c("multiviewtest"),
from = "2015", to = "2020-10-28")
m <- packageRank::cranDownloads(packages = c("multiviewtest"),
from = "2015", to = "2020-10-28")
m <- packageRank::cranDownloads(packages = c("multiviewtest"),
from = "2015", to = "2020-10-27")
plot(m$cranlogs.data$count)
sum(m$cranlogs.data$count)
m <- packageRank::cranDownloads(packages = c("multiviewtest"),
from = "2018", to = "2020-10-28")
m <- packageRank::cranDownloads(packages = c("multiviewtest"),
from = "2018", to = "2020-10-27")
plot(m$cranlogs.data$count)
m <- packageRank::cranDownloads(packages = c("multiviewtest"),
from = "2018-10-27", to = "2020-10-27")
plot(m$cranlogs.data$count)
sum(m$cranlogs.data$count)
setwd("~/Dropbox/My-Research/Lucy-Dissertation/Clustering-Selective-Inference/R-Code/clusterpval/R")
set.seed(123)
dat <- rbind(c(-1, 0), c(0, sqrt(3)), c(1, 0))[rep(1:3, length=100), ] +
matrix(0.2*rnorm(200), 100, 2)
hcl <- fastcluster::hclust(dist(dat, method="euclidean")^2, method="complete")
set.seed(1)
X <- dat
K <- 3
k1 <- 1
k2 <- 2
iso <- TRUE
sig <- 0.2
ndraws <- 2000
n <- nrow(X)
q <- ncol(X)
hcl_at_K <- stats::cutree(hcl, K)
k1_obs <- which(hcl_at_K == k1)
k2_obs <- which(hcl_at_K == k2)
n1 <- length(k1_obs)
n2 <- length(k2_obs)
squared_norm_nu <- 1/n1 + 1/n2
diff_means <- colMeans(X[k1_obs, , drop=FALSE]) - colMeans(X[k2_obs, , drop=FALSE])
prop_k2 <- n2/(n1+n2)
if(iso) {
if(is.null(sig)) {
sig <- sqrt(sum(scale(X, scale=FALSE)^2)/(n*q - q))
}
scale_factor <- squared_norm_nu*sig^2
# compute test statistic
stat <- norm_vec(diff_means)
} else {
if(is.null(SigInv)) {
Sig <- stats::cov(scale(X, scale=FALSE))
SigInv <- solve(Sig)
}
scale_factor <- squared_norm_nu
# compute test statistic
stat <- sqrt(as.numeric(t(diff_means)%*%SigInv%*%diff_means))
}
norm_vec <- function(x) {
sqrt(sum(x^2))
}
if(iso) {
if(is.null(sig)) {
sig <- sqrt(sum(scale(X, scale=FALSE)^2)/(n*q - q))
}
scale_factor <- squared_norm_nu*sig^2
# compute test statistic
stat <- norm_vec(diff_means)
} else {
if(is.null(SigInv)) {
Sig <- stats::cov(scale(X, scale=FALSE))
SigInv <- solve(Sig)
}
scale_factor <- squared_norm_nu
# compute test statistic
stat <- sqrt(as.numeric(t(diff_means)%*%SigInv%*%diff_means))
}
scale_factor <- sqrt(scale_factor)
log_survives <- rep(NA, ndraws)
if(iso) {
if(is.null(sig)) {
sig <- sqrt(sum(scale(X, scale=FALSE)^2)/(n*q - q))
}
scale_factor <- squared_norm_nu*sig^2
# compute test statistic
stat <- norm_vec(diff_means)
} else {
if(is.null(SigInv)) {
Sig <- stats::cov(scale(X, scale=FALSE))
SigInv <- solve(Sig)
}
scale_factor <- squared_norm_nu
# compute test statistic
stat <- sqrt(as.numeric(t(diff_means)%*%SigInv%*%diff_means))
}
scale_factor <- sqrt(scale_factor)
log_survives <- rep(NA, ndraws)
phi <- stats::rnorm(ndraws)*scale_factor + stat
k1_constant <- prop_k2*diff_means/stat
k2_constant <- (prop_k2 - 1)*diff_means/stat
orig_k1 <- t(X[k1_obs, ])
orig_k2 <- t(X[k2_obs, ])
Xphi <- X
for(j in 1:ndraws) {
if(phi[j] < 0) next
# Compute perturbed data set
phi_minus_stat <- phi[j] - stat
Xphi[k1_obs, ] <- t(orig_k1 + k1_constant*phi_minus_stat)
Xphi[k2_obs, ] <- t(orig_k2 + k2_constant*phi_minus_stat)
# Recluster the perturbed data set
hcl_Xphi <- fastcluster::hclust(stats::dist(Xphi)^2, method="complete")
clusters_Xphi <- stats::cutree(hcl_Xphi, K)
if(same_cl(hcl_at_K, clusters_Xphi, K)) {
log_survives[j] <- -(phi[j]/scale_factor)^2/2 + (q-1)*log(phi[j]/scale_factor) - (q/2 - 1)*log(2) - log(gamma(q/2)) - log(scale_factor) -
stats::dnorm(phi[j], mean=stat, sd=scale_factor, log=TRUE)
}
}
# ----- general purpose helper functions -----
#' Takes the l2-norm of a vector.
#'
#' @keywords internal
#'
#' @param x the vector to be normed
#'
#' @return Returns the l2-norm of x.
norm_vec <- function(x) {
sqrt(sum(x^2))
}
#' Checks if input is an integer between a and b
#'
#' @keywords internal
#'
#' @param x input to check
#' @param a lower
#' @param b upper
#'
#' @return Returns TRUE if input is an integer between a and b, FALSE otherwise
is_integer_between_a_b <- function(x, a, b) {
(x>= min(c(a, b))) && (x %% 1 == 0) && (x <= max(c(a, b)))
}
#' Checks if two clusterings are the same up to permutation
#'
#' @keywords internal
#'
#' @param cl1 the first clustering
#' @param cl2 the second clustering
#' @param K the number of clusters
#'
#' @return Returns TRUE if they are the same, and FALSE otherwise
same_cl <- function(cl1, cl2, K) {
tab <- table(cl1, cl2)
sum(tab != 0) == K
}
#' Checks if Ck, Ck' in C(x'(phi))
#'
#' @keywords internal
#'
#' @param cl clustering of x
#' @param cl_phi clustering of x'(phi)
#' @param k1,k2 index of clusters involved in the test
#'
#' @return Returns TRUE if Ck, Ck' in C(x'(phi)), and FALSE otherwise
preserve_cl <- function(cl, cl_phi, k1, k2) {
tab <- table(cl, cl_phi)
k1_in <- (sum(tab[k1, ] != 0) == 1) & (sum(tab[, k1] != 0) == 1)
k2_in <- (sum(tab[k2, ] != 0) == 1) & (sum(tab[, k2] != 0) == 1)
k1_in & k2_in
}
for(j in 1:ndraws) {
if(phi[j] < 0) next
# Compute perturbed data set
phi_minus_stat <- phi[j] - stat
Xphi[k1_obs, ] <- t(orig_k1 + k1_constant*phi_minus_stat)
Xphi[k2_obs, ] <- t(orig_k2 + k2_constant*phi_minus_stat)
# Recluster the perturbed data set
hcl_Xphi <- fastcluster::hclust(stats::dist(Xphi)^2, method="complete")
clusters_Xphi <- stats::cutree(hcl_Xphi, K)
if(same_cl(hcl_at_K, clusters_Xphi, K)) {
log_survives[j] <- -(phi[j]/scale_factor)^2/2 + (q-1)*log(phi[j]/scale_factor) - (q/2 - 1)*log(2) - log(gamma(q/2)) - log(scale_factor) -
stats::dnorm(phi[j], mean=stat, sd=scale_factor, log=TRUE)
}
}
scale_factor <- sqrt(scale_factor)
log_survives <- rep(NA, ndraws)
phi <- stats::rnorm(ndraws)*scale_factor + stat
k1_constant <- prop_k2*diff_means/stat
k2_constant <- (prop_k2 - 1)*diff_means/stat
orig_k1 <- t(X[k1_obs, ])
orig_k2 <- t(X[k2_obs, ])
Xphi <- X
for(j in 1:ndraws) {
if(phi[j] < 0) next
# Compute perturbed data set
phi_minus_stat <- phi[j] - stat
Xphi[k1_obs, ] <- t(orig_k1 + k1_constant*phi_minus_stat)
Xphi[k2_obs, ] <- t(orig_k2 + k2_constant*phi_minus_stat)
# Recluster the perturbed data set
hcl_Xphi <- fastcluster::hclust(stats::dist(Xphi)^2, method="complete")
clusters_Xphi <- stats::cutree(hcl_Xphi, K)
if(same_cl(hcl_at_K, clusters_Xphi, K)) {
log_survives[j] <- -(phi[j]/scale_factor)^2/2 + (q-1)*log(phi[j]/scale_factor) - (q/2 - 1)*log(2) - log(gamma(q/2)) - log(scale_factor) -
stats::dnorm(phi[j], mean=stat, sd=scale_factor, log=TRUE)
}
}
phi <- phi[!is.na(log_survives)]
log_survives <- log_survives[!is.na(log_survives)]
survives <- length(log_survives)
if(survives == 0) {
warning("Oops - we didn't generate any samples that preserved the clusters! Try re-running with a larger value of ndraws.")
return(list(hiercl=hcl, stat=stat, pval=NA))
}
if(survives < 100) {
warning(paste("Only", survives, "samples were used to compute the denominator -",
"p-value approximation may be unstable. Consider re-running",
"with a larger value of ndraws."))
}
log_survives_shift <- log_survives - max(log_survives)
props <- exp(log_survives_shift)/sum(exp(log_survives_shift))
props
length(props)
length(pval)
pval <- sum(props[phi > stat])
pval
props
length(props)
props[phi > stat]
length(props[phi > stat])
length(props)
stat
sum(phi > stat)
summary(phi)
stat
survives
log_survives
props
sum(props[phi < stat]^2) + (1-pval)^2*sum(props[phi >= stat])
(sum(props[phi < stat]^2) + (1-pval)^2*sum(props[phi >= stat]))/(ndraws*pval)
(sum(props[phi < stat]^2) + (1-pval)^2*sum(props[phi >= stat]))/(pval)
sum(props[phi < stat]^2) + (1-pval)^2*sum(props[phi >= stat])
pval
props[phi < stat]
props[phi < stat]^2
sum(props[phi < stat]^2)
sum(props[phi > stat]^2)
sum(props)
(1 - pval)^2*sum(props[phi > stat]^2)
(1 - pval)^2*sum(props[phi >= stat]^2) + sum(props[phi < stat]^2)
sum(props[phi < stat]^2)
props[phi < stat]^2
(1 - pval)^2*sum(props[phi >= stat]^2) + sum(props[phi < stat]^2)
(1 - pval)^2*sum(props[phi >= stat]^2) + pval^2*sum(props[phi < stat]^2)
pval
1.96*4.409732e-23
qnorm(0.975)
var_pval <- (1 - pval)^2*sum(props[phi >= stat]^2) + pval^2*sum(props[phi < stat]^2)
pval_lower_ci <- pval - qnorm(0.975)*sqrt(var_pval)
pval_upper_ci <- pval + qnorm(0.975)*sqrt(var_pval)
pval_lower_ci
pval_upper_ci
max(0, pval - qnorm(0.975)*sqrt(var_pval))
min(pval + qnorm(0.975)*sqrt(var_pval), 1)
sqrt(ar(pval))
sqrt(vr(pval))
sqrt(var(pval))
test_complete_hier_clusters_approx <- function(X, K, k1, k2, iso=TRUE, sig=NULL, SigInv=NULL, ndraws=2000, hcl=NULL) {
# error checking
if(!is.matrix(X)) stop("X should be a matrix")
n <- nrow(X)
q <- ncol(X)
if(!is_integer_between_a_b(K, 2, n)) stop("number of clusters (K) should be between 2 and n")
if(!is_integer_between_a_b(k1, 1, K) | !is_integer_between_a_b(k2, 1, K)) stop(paste("cluster indices should be between 1 and K", sep=""))
if((iso != TRUE) & (iso != FALSE)) stop("iso should be TRUE or FALSE")
# hierarchical clustering with squared Euclidean distance and specified linkage
if(is.null(hcl)) hcl <- fastcluster::hclust(stats::dist(X, method="euclidean")^2, method="complete")
hcl_at_K <- stats::cutree(hcl, K)
k1_obs <- which(hcl_at_K == k1)
k2_obs <- which(hcl_at_K == k2)
n1 <- length(k1_obs)
n2 <- length(k2_obs)
squared_norm_nu <- 1/n1 + 1/n2
diff_means <- colMeans(X[k1_obs, , drop=FALSE]) - colMeans(X[k2_obs, , drop=FALSE])
prop_k2 <- n2/(n1+n2)
if(iso) {
if(is.null(sig)) {
sig <- sqrt(sum(scale(X, scale=FALSE)^2)/(n*q - q))
}
scale_factor <- squared_norm_nu*sig^2
# compute test statistic
stat <- norm_vec(diff_means)
} else {
if(is.null(SigInv)) {
Sig <- stats::cov(scale(X, scale=FALSE))
SigInv <- solve(Sig)
}
scale_factor <- squared_norm_nu
# compute test statistic
stat <- sqrt(as.numeric(t(diff_means)%*%SigInv%*%diff_means))
}
scale_factor <- sqrt(scale_factor)
log_survives <- rep(NA, ndraws)
phi <- stats::rnorm(ndraws)*scale_factor + stat
k1_constant <- prop_k2*diff_means/stat
k2_constant <- (prop_k2 - 1)*diff_means/stat
orig_k1 <- t(X[k1_obs, ])
orig_k2 <- t(X[k2_obs, ])
Xphi <- X
for(j in 1:ndraws) {
if(phi[j] < 0) next
# Compute perturbed data set
phi_minus_stat <- phi[j] - stat
Xphi[k1_obs, ] <- t(orig_k1 + k1_constant*phi_minus_stat)
Xphi[k2_obs, ] <- t(orig_k2 + k2_constant*phi_minus_stat)
# Recluster the perturbed data set
hcl_Xphi <- fastcluster::hclust(stats::dist(Xphi)^2, method="complete")
clusters_Xphi <- stats::cutree(hcl_Xphi, K)
if(same_cl(hcl_at_K, clusters_Xphi, K)) {
log_survives[j] <- -(phi[j]/scale_factor)^2/2 + (q-1)*log(phi[j]/scale_factor) - (q/2 - 1)*log(2) - log(gamma(q/2)) - log(scale_factor) -
stats::dnorm(phi[j], mean=stat, sd=scale_factor, log=TRUE)
}
}
# Trim down to only survives
phi <- phi[!is.na(log_survives)]
log_survives <- log_survives[!is.na(log_survives)]
survives <- length(log_survives)
# Return nothing if nothing survives
if(survives == 0) {
warning("Oops - we didn't generate any samples that preserved the clusters! Try re-running with a larger value of ndraws.")
return(list(hiercl=hcl, stat=stat, pval=NA))
}
if(survives < 100) {
warning(paste("Only", survives, "samples were used to compute the denominator -",
"p-value approximation may be unstable. Consider re-running",
"with a larger value of ndraws."))
}
#  Approximate p-values
log_survives_shift <- log_survives - max(log_survives)
props <- exp(log_survives_shift)/sum(exp(log_survives_shift))
pval <- sum(props[phi >= stat])
var_pval <- (1 - pval)^2*sum(props[phi >= stat]^2) + pval^2*sum(props[phi < stat]^2)
# pval_lower_ci <- max(0, pval - qnorm(0.975)*sqrt(var_pval))
# pval_upper_ci <- min(pval + qnorm(0.975)*sqrt(var_pval), 1)
# var_pval <-
return(list(stat=stat, pval=pval, stderr=sqrt(var_pval), hiercl=hcl))
}
set.seed(123)
dat <- matrix(0.2*rnorm(200), 100, 2)
hcl <- fastcluster::hclust(dist(dat, method="euclidean")^2, method="complete")
plot(hcl)
rect_hier_clusters(hcl, k=3, which=1:2, border=c("blue", "orange"))
clusterpval::rect_hier_clusters(hcl, k=3, which=1:2, border=c("blue", "orange"))
set.seed(1)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=1000)
results
set.seed(1)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=100)
results$stat
results$pval
results$stderr
test_complete_hier_clusters_approx <- function(X, K, k1, k2, iso=TRUE, sig=NULL, SigInv=NULL, ndraws=2000, hcl=NULL) {
# error checking
if(!is.matrix(X)) stop("X should be a matrix")
n <- nrow(X)
q <- ncol(X)
if(!is_integer_between_a_b(K, 2, n)) stop("number of clusters (K) should be between 2 and n")
if(!is_integer_between_a_b(k1, 1, K) | !is_integer_between_a_b(k2, 1, K)) stop(paste("cluster indices should be between 1 and K", sep=""))
if((iso != TRUE) & (iso != FALSE)) stop("iso should be TRUE or FALSE")
# hierarchical clustering with squared Euclidean distance and specified linkage
if(is.null(hcl)) hcl <- fastcluster::hclust(stats::dist(X, method="euclidean")^2, method="complete")
hcl_at_K <- stats::cutree(hcl, K)
k1_obs <- which(hcl_at_K == k1)
k2_obs <- which(hcl_at_K == k2)
n1 <- length(k1_obs)
n2 <- length(k2_obs)
squared_norm_nu <- 1/n1 + 1/n2
diff_means <- colMeans(X[k1_obs, , drop=FALSE]) - colMeans(X[k2_obs, , drop=FALSE])
prop_k2 <- n2/(n1+n2)
if(iso) {
if(is.null(sig)) {
sig <- sqrt(sum(scale(X, scale=FALSE)^2)/(n*q - q))
}
scale_factor <- squared_norm_nu*sig^2
# compute test statistic
stat <- norm_vec(diff_means)
} else {
if(is.null(SigInv)) {
Sig <- stats::cov(scale(X, scale=FALSE))
SigInv <- solve(Sig)
}
scale_factor <- squared_norm_nu
# compute test statistic
stat <- sqrt(as.numeric(t(diff_means)%*%SigInv%*%diff_means))
}
scale_factor <- sqrt(scale_factor)
log_survives <- rep(NA, ndraws)
phi <- stats::rnorm(ndraws)*scale_factor + stat
k1_constant <- prop_k2*diff_means/stat
k2_constant <- (prop_k2 - 1)*diff_means/stat
orig_k1 <- t(X[k1_obs, ])
orig_k2 <- t(X[k2_obs, ])
Xphi <- X
for(j in 1:ndraws) {
if(phi[j] < 0) next
# Compute perturbed data set
phi_minus_stat <- phi[j] - stat
Xphi[k1_obs, ] <- t(orig_k1 + k1_constant*phi_minus_stat)
Xphi[k2_obs, ] <- t(orig_k2 + k2_constant*phi_minus_stat)
# Recluster the perturbed data set
hcl_Xphi <- fastcluster::hclust(stats::dist(Xphi)^2, method="complete")
clusters_Xphi <- stats::cutree(hcl_Xphi, K)
if(same_cl(hcl_at_K, clusters_Xphi, K)) {
log_survives[j] <- -(phi[j]/scale_factor)^2/2 + (q-1)*log(phi[j]/scale_factor) - (q/2 - 1)*log(2) - log(gamma(q/2)) - log(scale_factor) -
stats::dnorm(phi[j], mean=stat, sd=scale_factor, log=TRUE)
}
}
# Trim down to only survives
phi <- phi[!is.na(log_survives)]
log_survives <- log_survives[!is.na(log_survives)]
survives <- length(log_survives)
# Return nothing if nothing survives
if(survives == 0) {
warning("Oops - we didn't generate any samples that preserved the clusters! Try re-running with a larger value of ndraws.")
return(list(hiercl=hcl, stat=stat, pval=NA))
}
if(survives < 100) {
warning(paste("Only", survives, "samples were used to compute the denominator -",
"p-value approximation may be unstable. Consider re-running",
"with a larger value of ndraws."))
}
#  Approximate p-values
log_survives_shift <- log_survives - max(log_survives)
props <- exp(log_survives_shift)/sum(exp(log_survives_shift))
pval <- sum(props[phi >= stat])
var_pval <- (1 - pval)^2*sum(props[phi >= stat]^2) + pval^2*sum(props[phi < stat]^2)
return(list(stat=stat, pval=pval, stderr=sqrt(var_pval), hiercl=hcl))
}
set.seed(1)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=1000)
results$pval
results$stderr
set.seed(1)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=10000)
results$pval
results$stderr
0.511937- 1.96*0.01520826
0.4189947 + 1.96*sqrt(0.04481541)
0.511937- 1.96*sqrt(0.01520826)
set.seed(1)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=2000)
results$pval - 1.96*results$stderr
results$pval + 1.96*results$stderr
0.4189947 - 1.96*0.04481541
0.4189947 + 1.96*0.04481541
0.511937- 1.96*0.01520826
0.511937 + 1.96*0.01520826
rbind(c(0.4189947 - 1.96*0.04481541, 0.4189947 + 1.96*0.04481541), c(results$pval - 1.96*results$stderr, results$pval + 1.96*results$stderr), c(0.511937- 1.96*0.01520826, 0.511937+ 1.96*0.01520826))
set.seed(123)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=10000)
c(results$pval - 1.96*results$stderr, results$pval + 1.96*results$stderr)
set.seed(123)
results <- test_complete_hier_clusters_approx(X=dat, K=3, k1=1, k2=2, ndraws=2000)
c(results$pval - 1.96*results$stderr, results$pval + 1.96*results$stderr)
results$pval
1.96*results$stderr
results
